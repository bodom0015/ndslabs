/* global angular:false */

angular
.module('ndslabs-landing', [ 'ngRoute', 'ngCookies', 'navbar', 'footer', 'ndslabs-api', 'angular-google-analytics' ])

/**
 * Account number for Google Analytics tracking
 */
.constant('GaAccount', '')

/**
 * Make lodash available for injection into controllers
 */
.constant('_', window._)

/**
 * The route to our "Recover Password" View
 */
.constant('ResetPasswordRoute', '/recover')
/**
 * The back-up (default) administrator e-mail to use for support, 
 * in case the /api/contact endpoint is unavailable
 */
.constant('SupportEmail', 'lambert8@illinois.edu')

/**
 * The name of the product to display in the UI and the URL to link to when clicked
 */
 
.constant('OrgName', 'NDS')
.constant('ProductName', 'Labs Workbench')
.constant('ProductUrl', 'http://www.nationaldataservice.org/projects/labs.html')

/**
 * The version/revision of this GUI
 */
.constant('BuildVersion', '1.0.13-devel')
.constant('BuildDate', '')

/**
 * Hostname / Port for communicating with etcd
 * 
 * This must be the external IP and nodePort (when running in k8)
 * 
 * TODO: We assume this is running on the same machine as the apiserver.
 */ 
.constant('ApiHost', 'www.mldev.ndslabs.org')
.constant('ApiPort', '')
.constant('ApiPath', '/api')
.constant('ApiSecure', true) 

.constant('WebsocketPath', '/console')

/** Store our built ApiUri here */
.value('ApiUri', { api: '', ws: '' })


/**
 * Logic for communicating with etcd (powered by swagger-js-codegen)
 * @param {string} ApiHost - the hostname defined above
 * @param {string} ApiPort - the port defined above
 * @param {string} ApiPath - the path defined above
 * @param {Object} ApiServer - the REST API client generated by swagger; see 'app/shared/NdsLabsRestApi.js'
 */ 
.factory('NdsLabsApi', [ 'ApiHost', 'ApiPort', 'ApiPath', 'ApiSecure', 'WebsocketPath', 'ApiUri', 'ApiServer', 
    function(ApiHost, ApiPort, ApiPath, ApiSecure, WebsocketPath, ApiUri, ApiServer) {
  "use strict";

  // TODO: Investigate options / caching
  // XXX: Caching may not be possible due to the unique token sent with every request
  
  // Start with the protocol
  if (ApiSecure) {
    ApiUri.api = 'https://' + ApiHost;
    ApiUri.ws = 'wss://' + ApiHost;
  } else {
    ApiUri.api = 'http://' + ApiHost;
    ApiUri.ws = 'ws://' + ApiHost;
  }
  
  // Add on the port suffix, if applicable
  if (ApiPort) {
    var portSuffix = ':' + ApiPort; 
    
    ApiUri.api += portSuffix;
    ApiUri.ws += portSuffix;
  }
  
  // Add on the path suffix, if applicable
   ApiUri.api += ApiPath;
   ApiUri.ws += ApiPath + WebsocketPath;
  
  // Instantiate a new client for the ApiServer using our newly built uri
  return new ApiServer(ApiUri.api);
}])

/**
 * Configure routes / HTTP for our app using the services defined above
 */
.config([ '$provide', '$routeProvider', '$httpProvider', /*'$logProvider',*/ 'ProductName', 'GaAccount', 'AnalyticsProvider', 
    function($provide, $routeProvider, $httpProvider, /*$logProvider,*/ ProductName, GaAccount, AnalyticsProvider) {
  "use strict";
  
   // Squelch debug-level log messages
  //$logProvider.debugEnabled(false); 
  
  // Set up Google Analytics
  AnalyticsProvider.setAccount(GaAccount)
                   .useECommerce(false, false)
                   .trackPages(true)
                   .trackUrlParams(true)
  //                 .ignoreFirstPageLoad(true)
                   .readFromRoute(true)
  //                 .setDomainName(ApiUri.api)
  //                 .setHybridMobileSupport(true)
                   .useDisplayFeatures(true)
                   .useEnhancedLinkAttribution(true);
  
  // Set up log decorator (log forwarding)
  /*$provide.decorator('$log', ['$delegate', 'Logging', function($delegate, Logging) {
    Logging.enabled = true;
    var methods = {
      debug: function() {
        if (Logging.enabled) {
          // Only logging debug messages to the console
          $delegate.debug.apply($delegate, arguments);
          //Logging.debug.apply(null, arguments);
        }
      },
      error: function() {
        if (Logging.enabled) {
          $delegate.error.apply($delegate, arguments);
          Logging.error.apply(null, arguments);
        }
      },
      log: function() {
        if (Logging.enabled) {
          $delegate.log.apply($delegate, arguments);
          Logging.log.apply(null, arguments);
        }
      },
      info: function() {
        if (Logging.enabled) {
          $delegate.info.apply($delegate, arguments);
          Logging.info.apply(null, arguments);
        }
      },
      warn: function() {
        if (Logging.enabled) {
          $delegate.warn.apply($delegate, arguments);
          Logging.warn.apply(null, arguments);
        }
      }
    };
    return methods;
  }]);*/
      
  $routeProvider
  .when('/', {
    title: ProductName + ' Landing Page',
    controller: 'LandingController',
    templateUrl: 'landing.html',
    pageTrack: '/'
  });
}])

/**
 * The controller for our "Landing Page" View
 * 
 * @author lambert8
 * @see https://opensource.ncsa.illinois.edu/confluence/display/~lambert8/3.%29+Controllers%2C+Scopes%2C+and+Partial+Views
 */
.controller('LandingController', [ '$scope', '$location', '$routeParams', '$log', '_', /*'AuthInfo',*/ 'OrgName', 'ProductName', 'ProductUrl', 'ApiServer', /*'HelpLinks', 'ResetPasswordRoute',*/
    function($scope, $location, $routeParams, $log, _, /*AuthInfo,*/ OrgName, ProductName, ProductUrl, ApiServer/*, HelpLinks, ResetPasswordRoute*/) {
  "use strict";

  if ($routeParams.t && !$routeParams.u) {
    //$location.path(ResetPasswordRoute);
    return;
  }    
      
  $scope.orgName = OrgName;
  $scope.productName = ProductName;
  $scope.productUrl = ProductUrl;
  //$scope.helpLinks = HelpLinks;
  
  //$scope.auth = AuthInfo.get();
  
  $scope.featureLink = _.find($scope.helpLinks, [ 'name', 'Feature Overview' ]);
  
  $scope.token = $routeParams.t;
  $scope.user = $routeParams.u;
  
  $scope.productName = ProductName;
  
  if ($scope.user && $scope.token) {
    $scope.verified = null;
    NdsLabsApi.putRegisterVerify({ verify: { u: $scope.user, t: $scope.token } }).then(function(data) {
      console.debug(data);
      $scope.verified = true;
    }, function(response) {
      $log.error("Failed to verify user " + $scope.user + ":" + $scope.token);
      $scope.verified = false;
    });
  }
}]);
